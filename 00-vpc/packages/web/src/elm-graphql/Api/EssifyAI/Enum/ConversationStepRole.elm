-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.EssifyAI.Enum.ConversationStepRole exposing (..)

import Json.Decode as Decode exposing (Decoder)


type ConversationStepRole
    = Assistant
    | System
    | User


list : List ConversationStepRole
list =
    [ Assistant, System, User ]


decoder : Decoder ConversationStepRole
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "ASSISTANT" ->
                        Decode.succeed Assistant

                    "SYSTEM" ->
                        Decode.succeed System

                    "USER" ->
                        Decode.succeed User

                    _ ->
                        Decode.fail ("Invalid ConversationStepRole type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : ConversationStepRole -> String
toString enum____ =
    case enum____ of
        Assistant ->
            "ASSISTANT"

        System ->
            "SYSTEM"

        User ->
            "USER"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe ConversationStepRole
fromString enumString____ =
    case enumString____ of
        "ASSISTANT" ->
            Just Assistant

        "SYSTEM" ->
            Just System

        "USER" ->
            Just User

        _ ->
            Nothing
