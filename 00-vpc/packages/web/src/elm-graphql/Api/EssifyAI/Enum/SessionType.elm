-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.EssifyAI.Enum.SessionType exposing (..)

import Json.Decode as Decode exposing (Decoder)


type SessionType
    = Api
    | Scoped
    | Web


list : List SessionType
list =
    [ Api, Scoped, Web ]


decoder : Decoder SessionType
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "API" ->
                        Decode.succeed Api

                    "SCOPED" ->
                        Decode.succeed Scoped

                    "WEB" ->
                        Decode.succeed Web

                    _ ->
                        Decode.fail ("Invalid SessionType type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : SessionType -> String
toString enum____ =
    case enum____ of
        Api ->
            "API"

        Scoped ->
            "SCOPED"

        Web ->
            "WEB"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe SessionType
fromString enumString____ =
    case enumString____ of
        "API" ->
            Just Api

        "SCOPED" ->
            Just Scoped

        "WEB" ->
            Just Web

        _ ->
            Nothing
