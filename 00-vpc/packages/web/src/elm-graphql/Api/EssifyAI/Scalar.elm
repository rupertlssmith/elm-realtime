-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.EssifyAI.Scalar exposing (Codecs, DateTime(..), Id(..), Json(..), defaultCodecs, defineCodecs, unwrapCodecs, unwrapEncoder)

import Graphql.Codec exposing (Codec)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode
import Json.Decode as Decode exposing (Decoder)
import Json.Encode as Encode


type DateTime
    = DateTime String


type Id
    = Id String


type Json
    = Json String


defineCodecs :
    { codecDateTime : Codec valueDateTime
    , codecId : Codec valueId
    , codecJson : Codec valueJson
    }
    -> Codecs valueDateTime valueId valueJson
defineCodecs definitions =
    Codecs definitions


unwrapCodecs :
    Codecs valueDateTime valueId valueJson
    ->
        { codecDateTime : Codec valueDateTime
        , codecId : Codec valueId
        , codecJson : Codec valueJson
        }
unwrapCodecs (Codecs unwrappedCodecs) =
    unwrappedCodecs


unwrapEncoder :
    (RawCodecs valueDateTime valueId valueJson -> Codec getterValue)
    -> Codecs valueDateTime valueId valueJson
    -> getterValue
    -> Graphql.Internal.Encode.Value
unwrapEncoder getter (Codecs unwrappedCodecs) =
    (unwrappedCodecs |> getter |> .encoder) >> Graphql.Internal.Encode.fromJson


type Codecs valueDateTime valueId valueJson
    = Codecs (RawCodecs valueDateTime valueId valueJson)


type alias RawCodecs valueDateTime valueId valueJson =
    { codecDateTime : Codec valueDateTime
    , codecId : Codec valueId
    , codecJson : Codec valueJson
    }


defaultCodecs : RawCodecs DateTime Id Json
defaultCodecs =
    { codecDateTime =
        { encoder = \(DateTime raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map DateTime
        }
    , codecId =
        { encoder = \(Id raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Id
        }
    , codecJson =
        { encoder = \(Json raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Json
        }
    }
